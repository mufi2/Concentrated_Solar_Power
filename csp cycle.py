# -*- coding: utf-8 -*-
"""Thermolab.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V7mpf4gScWmUwYkV7EO1QWDZ0kgy8j_7
"""

pip install pyromat

pip install coolprop

import pyromat as pyro
import CoolProp as cp
import numpy as np
import matplotlib.pyplot as plt
from CoolProp.CoolProp import PropsSI

pyro.config
pyro.config['unit_pressure'] = 'kPa'
pyro.config['unit_temperature'] = 'C'

He = pyro.get('ig.He')

"""Solar Sub System"""

### Solar radiance efficiency #######
N_cos = 0.8267
N_sb = 0.9698
N_int = 0.9710
N_att = 0.9383
N_ref = 0.88
#############
DNI = 10000
A_hel = 9.45*12.84
A_rec = 68.1
N_Hel =624

N_field =N_cos * N_sb * N_int * N_att * N_ref
Q_rec_in = (N_field * DNI * A_hel * N_Hel)/10000
print('Q_rec_in =',Q_rec_in)
Q_sun = 64358
Q_loss_1 = Q_sun - Q_rec_in
print('Q_loss_1 =',Q_loss_1)
cp = 1
m_air = 37.46
T28 = 400
H28 = PropsSI('H','P', 100000 ,'T', T28+273 ,'Air')/1000
T27 = 1125
H27 = PropsSI('H','P', 100000 ,'T', T27+273 ,'Air')/1000
print('H28 =',H28)
Q_Cycle_in = m_air*(H28 - H27)*-1
print('Q_Cycle_in =',Q_Cycle_in)
Q_loss_2 = Q_rec_in -Q_Cycle_in
print('Q_loss_2 =',Q_loss_2)
Effic_Heliostat = (Q_rec_in/Q_sun)*100
print('Effic_Heliostat =',Effic_Heliostat)
Effic_Reciver = (Q_Cycle_in/Q_rec_in)*100
print('Effic_Reciver =',Effic_Reciver)
print(Q_rec_in )

"""Brayton Cycle

"""

#Gas Turbine
import math
from numpy import log as ln
Pr = 3
P1= 7320
P2s = P1/Pr
T1 = 800
s1 = He.s(T1, P1)
print('s1 =',s1)
h1 = He.h(T=T1,p=P1)
print('h1 =',h1)
s2=s1
T2s = He.T(s=s2, p = P2s)
print('T2s =',T2s)
h2s = He.h(T= T2s)
h_2s = PropsSI('H','T', T2s, 'P',P2s,'He')/1000
print('h2s =',h_2s)
print(h_2s)
m_He=16.09
work_turbine_S = m_He*(h1-h_2s)
work_turbine_s = m_He*(h1-h2s)
Effic_Turbine = 0.932 - 0.01171*ln(1/Pr)
work_turbine_A = Effic_Turbine * work_turbine_S
work_turbine_a = Effic_Turbine * work_turbine_s
h_2a = h1-(work_turbine_A)/m_He
h2a = h1-(work_turbine_a)/m_He
T_2a = He.T(h = h_2a)
T2a = He.T(h = h2a)
P2a = He.p(s=s2, T = T2a)
print('T2a=',T_2a)
print('h2a=',h_2a)
print("P2a=",P2a)
print('Polytrophic efficiency of Turbine =',Effic_Turbine)







#Heat Excahnger
#Applying energy banalance in the heat exchanger
h10 = h1 - Q_rec_in/m_He
T10 = He.T(h = h10)
P10 = P1 + 100
s10 = He.s(p=P10,h=h10)
print('h10 = ',h10)
print('T10 = ',T10)
print('P10 =',P10)
print('s10 =',s10)

# Recuperator
P3 = P2a - 50
print('P3=',P3)
P9 = P10 + 80
print('P9=',P9)
# Effectiveness of recuperator
E = 0.9
T9 = (-T10 + (E*T_2a))/(E-1)
print('T9=',T9)
h9 = He.h(T=T9)
print('h9= ',h9)
h3 = h_2a-h10+h9
print('h3= ',h3)
T3 = He.T(h = h3)
print('T3=',T3)

"""ORC 1"""

#Turbine
T13 = 373.15
h13 = PropsSI('H','T', T13, 'Q', 1 ,'R123')/1000
P13 = PropsSI('P','T', T13, 'Q', 1 ,'R123')
s13 = PropsSI('S','Q',1,'T',T13,'R123')
print('P13= ',P13)
print('h13= ',h13)
print('s13= ',s13)

P14 = P13/Pr
print('P14= ',P14)
s14s = s13
h14s = PropsSI('H','P', P14, 'S', s14s ,'R123')/1000
print('h14s= ',h14s)
eta_turb=0.80
h14 = h13- (eta_turb*(h13-h14s))
print('h14= ',h14)
m= 30.65
work_turb_orc1 = m*(h13-h14)

#Condenser
T11=40+273.15
h11 = PropsSI('H','Q', 0, 'T', T11 ,'R123')/1000
s11 = PropsSI('S','Q',0,'T',T11,'R123')
P11 = PropsSI('P','Q', 0,'T', T11 ,'R123')
print('s11= ',s11)
print('h11= ',h11)
print('P11= ',P11)

#pump
P12 = P11*Pr
print('P12=',P12)
s12s = s11
h12s = PropsSI('H','P', P12, 'S', s12s ,'R123')/1000
print('h12s=',h12s)
eta_pump=0.85
h12 = h11- (eta_turb*(h11-h12s))
print('h12=',h12)
m= 30.65
work_pump_orc1 = m*(h12-h11)
print('work_pump_orc1=',work_pump_orc1)

"""From ORC 1 to Evaporator"""

h4=h3-(30.65/16.09)*(h13-h12)
T4 =He.T(h = h4)
Heat_rejected = m_He*(h3-h4)
P4 = P3 - 40
print('T4 =',T4)
print('h4 =',h4)
print('P4 =',P4)

print('Heat rejected=',Heat_rejected)

"""From Evaporator after ORC 1"""

#Precooler
T19 = 25
T5 = T4 - E*(T4-T19)
print('T5 =', T5)
P5 = P4 - 40
h5 = He.h(T = T5)
print('h5=',h5)
s5 = He.s(T=T5,p=P5)
print('s5=',s5)
#Lp Compressor
P6 = math.sqrt(P5*P9)
print('P6=',P6)
h6s = He.h(p=P6,s=s5)
print('h6s=',h6s)
Lp_compress_work_s =m_He*(h6s-h5)
PRc = P6/P5
Effic_Compressor_1 = 0.916 - 0.0175*ln(PRc)
Lp_compress_work_a = Lp_compress_work_s/Effic_Compressor_1
h6a = h5 + (Lp_compress_work_a)/m_He
print('h6a=',h6a)
print('Lp_compress_work=',Lp_compress_work_a)

"""ORC 2"""

#Turbine

T17 = 80+273.15
h17 = PropsSI('H','Q', 1, 'T', T17 ,'R123')/1000
s17 = PropsSI('S','Q',1,'T',T17,'R123')
P17 = PropsSI('P','T', T17, 'Q', 1 ,'R123')
print('P17=',P17)
print('s17=',s17)
print('h17=',h17)

P18 = P17/3
print('P18=',P18)
s18s = s17
h18s = PropsSI('H','P', P18, 'S', s18s ,'R123')/1000
print('h18=',h18s)
eta_turb=0.80
h18 = h17- (eta_turb*(h17-h18s))
s18 = PropsSI('S','Q',1,'P',P18,'R123')
print('s18=',s18)
print('h18=',h18)
m2= 18.08
work_turb_orc2 = m2*(h17-h18)
print('work_turb_orc2=',work_turb_orc2)

#Condenser
T15=40+273.15
h15 = PropsSI('H','Q', 0, 'T', T15 ,'R123')/1000
s15 = PropsSI('S','Q',0,'T',T15,'R123')
P15 = PropsSI('P','T', T15, 'Q', 0 ,'R123')
print('h15=',h15)
print('s15=',s15)
print('P15=',P15)

#pump
P16 = P15*Pr
print('P16=',P16)
s16s = s15
h16s = PropsSI('H','P', P16, 'S', s16s ,'R123')/1000
print('h16s=',h16s)
eta_pump=0.85
h16 = h15- (eta_turb*(h15-h16s))
print('h16=',h16)
work_pump_orc2 = m2*(h16-h15)
print('work_pump_orc2=',work_pump_orc2)

"""From ORC 2 to Evaporator"""

h7=h6a-((18.08/16.09)*(h17-h16))
T7 =He.T( h = h7)
Heat_rejected2 = m_He*(h6a-h7)
P7 = P6 - 40
print('P7 =', P7)
print('T7 =',T7)
print('H7 =',h7)
print('Heat rejected 2=',Heat_rejected2)

#Intercooling
T21 = 25

T8 = T7 - E*(T7 - T21)
print('T8=', T8)
P8 = P7 - 40
print('P8=',P8)
P9 = 7500
h8 = He.h(T = T8, p = P8)
s8 = He.s(T= T8, p = P8)
print('h8=',h8)
print('s8=',s8)
h9 = He.h(T = T9)
print('h9=',h9)
Hp_compress_work =m_He*(h9-h8)
print('Hp_compress_work=',Hp_compress_work)

"""Overall Cycle

"""

W_net_Brayton = work_turbine_S - Hp_compress_work - Lp_compress_work_a
W_net_orc = (work_turb_orc1 + work_turb_orc2 - work_pump_orc1-work_pump_orc2)
over_all_work = W_net_Brayton + W_net_orc
print('over_all_work=',over_all_work)
Q_loss_3 = Q_Cycle_in - over_all_work
print('Q_loss_3=',Q_loss_3)
Effic_Power_cycle = (over_all_work/Q_Cycle_in)*100
print('Effic_Power_cycle=',Effic_Power_cycle)
Q_loss_4 = Q_loss_1+Q_loss_2+Q_loss_3
print('Q_loss_4=',Q_loss_4)
Effic_Overall = (over_all_work/Q_sun)*100
print('Effic_Overall=',Effic_Overall)